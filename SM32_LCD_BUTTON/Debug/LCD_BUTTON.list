
LCD_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080010bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000008  080010c4  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000002c  080010c4  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002988  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b90  00000000  00000000  000229b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000350  00000000  00000000  00023550  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  000238a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000016a7  00000000  00000000  00023b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001047  00000000  00000000  0002520f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00026256  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c0c  00000000  00000000  000262d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00026ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08001064 	.word	0x08001064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08001064 	.word	0x08001064

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002d0:	2300      	movs	r3, #0
 80002d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	4013      	ands	r3, r2
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80002e0:	2301      	movs	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	e001      	b.n	80002ea <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80002e6:	2300      	movs	r3, #0
 80002e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr

080002f6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	460b      	mov	r3, r1
 8000300:	807b      	strh	r3, [r7, #2]
 8000302:	4613      	mov	r3, r2
 8000304:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000306:	787b      	ldrb	r3, [r7, #1]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d003      	beq.n	8000314 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800030c:	887a      	ldrh	r2, [r7, #2]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000312:	e002      	b.n	800031a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000314:	887a      	ldrh	r2, [r7, #2]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	615a      	str	r2, [r3, #20]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d006      	beq.n	8000344 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000336:	4909      	ldr	r1, [pc, #36]	; (800035c <RCC_APB2PeriphClockCmd+0x38>)
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <RCC_APB2PeriphClockCmd+0x38>)
 800033a:	699a      	ldr	r2, [r3, #24]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4313      	orrs	r3, r2
 8000340:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000342:	e006      	b.n	8000352 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000344:	4905      	ldr	r1, [pc, #20]	; (800035c <RCC_APB2PeriphClockCmd+0x38>)
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <RCC_APB2PeriphClockCmd+0x38>)
 8000348:	699a      	ldr	r2, [r3, #24]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	43db      	mvns	r3, r3
 800034e:	4013      	ands	r3, r2
 8000350:	618b      	str	r3, [r1, #24]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	40021000 	.word	0x40021000

08000360 <LCD_Set_Data>:
//-------------------------------------------------------------
//Настройка
//-------------------------------------------------------------

void LCD_Set_Data (uint8_t data)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	if ( ((data >> 7) & 0x01) == 1){ DB7(1); } else { DB7(0); }
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	09db      	lsrs	r3, r3, #7
 800036e:	b2db      	uxtb	r3, r3
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b00      	cmp	r3, #0
 8000376:	d006      	beq.n	8000386 <LCD_Set_Data+0x26>
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800037e:	4848      	ldr	r0, [pc, #288]	; (80004a0 <LCD_Set_Data+0x140>)
 8000380:	f7ff ffb9 	bl	80002f6 <GPIO_WriteBit>
 8000384:	e005      	b.n	8000392 <LCD_Set_Data+0x32>
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038c:	4844      	ldr	r0, [pc, #272]	; (80004a0 <LCD_Set_Data+0x140>)
 800038e:	f7ff ffb2 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 6) & 0x01) == 1){ DB6(1); } else { DB6(0); }
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	099b      	lsrs	r3, r3, #6
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d006      	beq.n	80003ae <LCD_Set_Data+0x4e>
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	483e      	ldr	r0, [pc, #248]	; (80004a0 <LCD_Set_Data+0x140>)
 80003a8:	f7ff ffa5 	bl	80002f6 <GPIO_WriteBit>
 80003ac:	e005      	b.n	80003ba <LCD_Set_Data+0x5a>
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b4:	483a      	ldr	r0, [pc, #232]	; (80004a0 <LCD_Set_Data+0x140>)
 80003b6:	f7ff ff9e 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 5) & 0x01) == 1){ DB5(1); } else { DB5(0); }
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	095b      	lsrs	r3, r3, #5
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d006      	beq.n	80003d6 <LCD_Set_Data+0x76>
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ce:	4834      	ldr	r0, [pc, #208]	; (80004a0 <LCD_Set_Data+0x140>)
 80003d0:	f7ff ff91 	bl	80002f6 <GPIO_WriteBit>
 80003d4:	e005      	b.n	80003e2 <LCD_Set_Data+0x82>
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	4830      	ldr	r0, [pc, #192]	; (80004a0 <LCD_Set_Data+0x140>)
 80003de:	f7ff ff8a 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 4) & 0x01) == 1){ DB4(1); } else { DB4(0); }
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	091b      	lsrs	r3, r3, #4
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d006      	beq.n	80003fe <LCD_Set_Data+0x9e>
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	482a      	ldr	r0, [pc, #168]	; (80004a0 <LCD_Set_Data+0x140>)
 80003f8:	f7ff ff7d 	bl	80002f6 <GPIO_WriteBit>
 80003fc:	e005      	b.n	800040a <LCD_Set_Data+0xaa>
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000404:	4826      	ldr	r0, [pc, #152]	; (80004a0 <LCD_Set_Data+0x140>)
 8000406:	f7ff ff76 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 3) & 0x01) == 1){ DB3(1); } else { DB3(0); }
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	08db      	lsrs	r3, r3, #3
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	2b00      	cmp	r3, #0
 8000416:	d005      	beq.n	8000424 <LCD_Set_Data+0xc4>
 8000418:	2201      	movs	r2, #1
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	4820      	ldr	r0, [pc, #128]	; (80004a0 <LCD_Set_Data+0x140>)
 800041e:	f7ff ff6a 	bl	80002f6 <GPIO_WriteBit>
 8000422:	e004      	b.n	800042e <LCD_Set_Data+0xce>
 8000424:	2200      	movs	r2, #0
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	481d      	ldr	r0, [pc, #116]	; (80004a0 <LCD_Set_Data+0x140>)
 800042a:	f7ff ff64 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 2) & 0x01) == 1){ DB2(1); } else { DB2(0); }
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	089b      	lsrs	r3, r3, #2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d005      	beq.n	8000448 <LCD_Set_Data+0xe8>
 800043c:	2201      	movs	r2, #1
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	4817      	ldr	r0, [pc, #92]	; (80004a0 <LCD_Set_Data+0x140>)
 8000442:	f7ff ff58 	bl	80002f6 <GPIO_WriteBit>
 8000446:	e004      	b.n	8000452 <LCD_Set_Data+0xf2>
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4814      	ldr	r0, [pc, #80]	; (80004a0 <LCD_Set_Data+0x140>)
 800044e:	f7ff ff52 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 1) & 0x01) == 1){ DB1(1); } else { DB1(0); }
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	085b      	lsrs	r3, r3, #1
 8000456:	b2db      	uxtb	r3, r3
 8000458:	f003 0301 	and.w	r3, r3, #1
 800045c:	2b00      	cmp	r3, #0
 800045e:	d005      	beq.n	800046c <LCD_Set_Data+0x10c>
 8000460:	2201      	movs	r2, #1
 8000462:	2120      	movs	r1, #32
 8000464:	480e      	ldr	r0, [pc, #56]	; (80004a0 <LCD_Set_Data+0x140>)
 8000466:	f7ff ff46 	bl	80002f6 <GPIO_WriteBit>
 800046a:	e004      	b.n	8000476 <LCD_Set_Data+0x116>
 800046c:	2200      	movs	r2, #0
 800046e:	2120      	movs	r1, #32
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <LCD_Set_Data+0x140>)
 8000472:	f7ff ff40 	bl	80002f6 <GPIO_WriteBit>
	if ( ((data >> 0) & 0x01) == 1){ DB0(1); } else { DB0(0); }
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d005      	beq.n	800048c <LCD_Set_Data+0x12c>
 8000480:	2201      	movs	r2, #1
 8000482:	2110      	movs	r1, #16
 8000484:	4806      	ldr	r0, [pc, #24]	; (80004a0 <LCD_Set_Data+0x140>)
 8000486:	f7ff ff36 	bl	80002f6 <GPIO_WriteBit>
}
 800048a:	e004      	b.n	8000496 <LCD_Set_Data+0x136>
	if ( ((data >> 0) & 0x01) == 1){ DB0(1); } else { DB0(0); }
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <LCD_Set_Data+0x140>)
 8000492:	f7ff ff30 	bl	80002f6 <GPIO_WriteBit>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40010800 	.word	0x40010800

080004a4 <LCD_Send_Command>:

void LCD_Send_Command (uint8_t data)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	RS(0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2102      	movs	r1, #2
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <LCD_Send_Command+0x3c>)
 80004b4:	f7ff ff1f 	bl	80002f6 <GPIO_WriteBit>
	LCD_Set_Data (data);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff50 	bl	8000360 <LCD_Set_Data>
	EN(1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2108      	movs	r1, #8
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <LCD_Send_Command+0x3c>)
 80004c6:	f7ff ff16 	bl	80002f6 <GPIO_WriteBit>
	LCD_delay_ms();
 80004ca:	f000 fab1 	bl	8000a30 <LCD_delay_ms>
	EN(0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2108      	movs	r1, #8
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <LCD_Send_Command+0x3c>)
 80004d4:	f7ff ff0f 	bl	80002f6 <GPIO_WriteBit>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010800 	.word	0x40010800

080004e4 <LCD_Send_Data>:

void LCD_Send_Data (uint8_t data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	RS(1);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2102      	movs	r1, #2
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <LCD_Send_Data+0x3c>)
 80004f4:	f7ff feff 	bl	80002f6 <GPIO_WriteBit>
	LCD_Set_Data (data);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff30 	bl	8000360 <LCD_Set_Data>
	EN(1);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <LCD_Send_Data+0x3c>)
 8000506:	f7ff fef6 	bl	80002f6 <GPIO_WriteBit>
	LCD_delay_ms();
 800050a:	f000 fa91 	bl	8000a30 <LCD_delay_ms>
	EN(0);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <LCD_Send_Data+0x3c>)
 8000514:	f7ff feef 	bl	80002f6 <GPIO_WriteBit>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40010800 	.word	0x40010800

08000524 <LCD_ini>:

void LCD_ini (void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	LCD_GPIO_ini();
 8000528:	f000 fa94 	bl	8000a54 <LCD_GPIO_ini>

// Настройка дисплея

	LCD_Send_Command(0x38);
 800052c:	2038      	movs	r0, #56	; 0x38
 800052e:	f7ff ffb9 	bl	80004a4 <LCD_Send_Command>
	delay_ms(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fa68 	bl	8000a08 <delay_ms>
	LCD_Send_Command(0x38);
 8000538:	2038      	movs	r0, #56	; 0x38
 800053a:	f7ff ffb3 	bl	80004a4 <LCD_Send_Command>
	delay_ms(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fa62 	bl	8000a08 <delay_ms>
	LCD_Send_Command(0x0C); // Настройка курсора
 8000544:	200c      	movs	r0, #12
 8000546:	f7ff ffad 	bl	80004a4 <LCD_Send_Command>
	delay_ms(2);
 800054a:	2002      	movs	r0, #2
 800054c:	f000 fa5c 	bl	8000a08 <delay_ms>
	LCD_Send_Command(0x01); // Очистка дисплея
 8000550:	2001      	movs	r0, #1
 8000552:	f7ff ffa7 	bl	80004a4 <LCD_Send_Command>
	delay_ms(2);
 8000556:	2002      	movs	r0, #2
 8000558:	f000 fa56 	bl	8000a08 <delay_ms>
	LCD_Send_Command(0x06);
 800055c:	2006      	movs	r0, #6
 800055e:	f7ff ffa1 	bl	80004a4 <LCD_Send_Command>
	delay_ms(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f000 fa50 	bl	8000a08 <delay_ms>
	LCD_Send_Command(0x02);
 8000568:	2002      	movs	r0, #2
 800056a:	f7ff ff9b 	bl	80004a4 <LCD_Send_Command>
	delay_ms(2);
 800056e:	2002      	movs	r0, #2
 8000570:	f000 fa4a 	bl	8000a08 <delay_ms>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <LCD_Send_String>:
//-------------------------------------------------------------
// Вывод изображения
//-------------------------------------------------------------

void LCD_Send_String (uint8_t str_num, char* str)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]

	if (str_num == 0)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d103      	bne.n	8000596 <LCD_Send_String+0x1e>
	{
		LCD_Send_Command(0x80);
 800058e:	2080      	movs	r0, #128	; 0x80
 8000590:	f7ff ff88 	bl	80004a4 <LCD_Send_Command>
 8000594:	e002      	b.n	800059c <LCD_Send_String+0x24>
	}
	else
	{
		LCD_Send_Command(0xC0);
 8000596:	20c0      	movs	r0, #192	; 0xc0
 8000598:	f7ff ff84 	bl	80004a4 <LCD_Send_Command>
	}
	delay_ms(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fa33 	bl	8000a08 <delay_ms>

	while (str[i] != 0)
 80005a2:	e00b      	b.n	80005bc <LCD_Send_String+0x44>
	{
		LCD_Send_Data(str[i]);
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff99 	bl	80004e4 <LCD_Send_Data>
		i++;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
		LCD_delay_ms();
 80005b8:	f000 fa3a 	bl	8000a30 <LCD_delay_ms>
	while (str[i] != 0)
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1ed      	bne.n	80005a4 <LCD_Send_String+0x2c>
	}
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LCD_Send_Pointer>:

void LCD_Send_Pointer (uint8_t pntr, char* str)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
	if (pntr == 0)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d106      	bne.n	80005f4 <LCD_Send_Pointer+0x24>
	{
		LCD_Send_Command(0x8C);
 80005e6:	208c      	movs	r0, #140	; 0x8c
 80005e8:	f7ff ff5c 	bl	80004a4 <LCD_Send_Command>
		delay_ms(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 fa0b 	bl	8000a08 <delay_ms>
 80005f2:	e012      	b.n	800061a <LCD_Send_Pointer+0x4a>
	}
	else
	{
		LCD_Send_Command(0xCC);
 80005f4:	20cc      	movs	r0, #204	; 0xcc
 80005f6:	f7ff ff55 	bl	80004a4 <LCD_Send_Command>
		delay_ms(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fa04 	bl	8000a08 <delay_ms>

	}
	while (str[i] != 0)
 8000600:	e00b      	b.n	800061a <LCD_Send_Pointer+0x4a>
	{
		LCD_Send_Data(str[i]);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff6a 	bl	80004e4 <LCD_Send_Data>
		i++;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	3301      	adds	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
		LCD_delay_ms();
 8000616:	f000 fa0b 	bl	8000a30 <LCD_delay_ms>
	while (str[i] != 0)
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	4413      	add	r3, r2
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1ed      	bne.n	8000602 <LCD_Send_Pointer+0x32>
	}
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <LCD_Screen>:


void LCD_Screen (uint8_t screen)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]

	char str1[] = "Short";
 800063a:	4a3c      	ldr	r2, [pc, #240]	; (800072c <LCD_Screen+0xfc>)
 800063c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	6018      	str	r0, [r3, #0]
 8000646:	3304      	adds	r3, #4
 8000648:	8019      	strh	r1, [r3, #0]
	char str2[] = "Long";
 800064a:	4a39      	ldr	r2, [pc, #228]	; (8000730 <LCD_Screen+0x100>)
 800064c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000654:	6018      	str	r0, [r3, #0]
 8000656:	3304      	adds	r3, #4
 8000658:	7019      	strb	r1, [r3, #0]
	char str3[] = "Beer";
 800065a:	4a36      	ldr	r2, [pc, #216]	; (8000734 <LCD_Screen+0x104>)
 800065c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000664:	6018      	str	r0, [r3, #0]
 8000666:	3304      	adds	r3, #4
 8000668:	7019      	strb	r1, [r3, #0]
	char str4[] = "Wine";
 800066a:	4a33      	ldr	r2, [pc, #204]	; (8000738 <LCD_Screen+0x108>)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	6018      	str	r0, [r3, #0]
 8000676:	3304      	adds	r3, #4
 8000678:	7019      	strb	r1, [r3, #0]
	char str5[] = "Vodka";
 800067a:	4a30      	ldr	r2, [pc, #192]	; (800073c <LCD_Screen+0x10c>)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000684:	6018      	str	r0, [r3, #0]
 8000686:	3304      	adds	r3, #4
 8000688:	8019      	strh	r1, [r3, #0]
	char str6[] = "Kognak";
 800068a:	4a2d      	ldr	r2, [pc, #180]	; (8000740 <LCD_Screen+0x110>)
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	6018      	str	r0, [r3, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	8019      	strh	r1, [r3, #0]
 800069a:	3302      	adds	r3, #2
 800069c:	0c0a      	lsrs	r2, r1, #16
 800069e:	701a      	strb	r2, [r3, #0]
	char str7[] = "Back";
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <LCD_Screen+0x114>)
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	7019      	strb	r1, [r3, #0]

	if (screen == 0)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10c      	bne.n	80006d0 <LCD_Screen+0xa0>
	{
		LCD_Send_String(0, str1);
 80006b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ba:	4619      	mov	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff5b 	bl	8000578 <LCD_Send_String>
		LCD_Send_String(1, str2);
 80006c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c6:	4619      	mov	r1, r3
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ff55 	bl	8000578 <LCD_Send_String>
	else if (screen == 3)
	{
		LCD_Send_String(0, str7);
		//LCD_Send_String(1, str6);
	}
}
 80006ce:	e028      	b.n	8000722 <LCD_Screen+0xf2>
	else if (screen == 1)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d10c      	bne.n	80006f0 <LCD_Screen+0xc0>
		LCD_Send_String(0, str3);
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	4619      	mov	r1, r3
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff ff4b 	bl	8000578 <LCD_Send_String>
		LCD_Send_String(1, str4);
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4619      	mov	r1, r3
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ff45 	bl	8000578 <LCD_Send_String>
}
 80006ee:	e018      	b.n	8000722 <LCD_Screen+0xf2>
	else if (screen == 2)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d10c      	bne.n	8000710 <LCD_Screen+0xe0>
		LCD_Send_String(0, str5);
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	4619      	mov	r1, r3
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff3b 	bl	8000578 <LCD_Send_String>
		LCD_Send_String(1, str6);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff35 	bl	8000578 <LCD_Send_String>
}
 800070e:	e008      	b.n	8000722 <LCD_Screen+0xf2>
	else if (screen == 3)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d105      	bne.n	8000722 <LCD_Screen+0xf2>
		LCD_Send_String(0, str7);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4619      	mov	r1, r3
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff2b 	bl	8000578 <LCD_Send_String>
}
 8000722:	bf00      	nop
 8000724:	3740      	adds	r7, #64	; 0x40
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	0800107c 	.word	0x0800107c
 8000730:	08001084 	.word	0x08001084
 8000734:	0800108c 	.word	0x0800108c
 8000738:	08001094 	.word	0x08001094
 800073c:	0800109c 	.word	0x0800109c
 8000740:	080010a4 	.word	0x080010a4
 8000744:	080010ac 	.word	0x080010ac

08000748 <LCD_Pointer>:

void LCD_Pointer (uint8_t pntr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]

	char str1[] = "<";
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	81bb      	strh	r3, [r7, #12]
	char str2[] = " ";
 8000756:	2320      	movs	r3, #32
 8000758:	813b      	strh	r3, [r7, #8]

	if (pntr == 1)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10c      	bne.n	800077a <LCD_Pointer+0x32>
	{
		LCD_Send_Pointer (0, str1);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4619      	mov	r1, r3
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff32 	bl	80005d0 <LCD_Send_Pointer>
		LCD_Send_Pointer (1, str2);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4619      	mov	r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff2c 	bl	80005d0 <LCD_Send_Pointer>
	else
	{
		LCD_Send_Pointer (0, str2);
		LCD_Send_Pointer (1, str1);
	}
}
 8000778:	e00b      	b.n	8000792 <LCD_Pointer+0x4a>
		LCD_Send_Pointer (0, str2);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff25 	bl	80005d0 <LCD_Send_Pointer>
		LCD_Send_Pointer (1, str1);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff1f 	bl	80005d0 <LCD_Send_Pointer>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	da0b      	bge.n	80007c8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80007b0:	490d      	ldr	r1, [pc, #52]	; (80007e8 <NVIC_SetPriority+0x4c>)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	3b04      	subs	r3, #4
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80007c6:	e009      	b.n	80007dc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80007c8:	4908      	ldr	r1, [pc, #32]	; (80007ec <NVIC_SetPriority+0x50>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007fe:	d301      	bcc.n	8000804 <SysTick_Config+0x14>
 8000800:	2301      	movs	r3, #1
 8000802:	e011      	b.n	8000828 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800080c:	3b01      	subs	r3, #1
 800080e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000810:	210f      	movs	r1, #15
 8000812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000816:	f7ff ffc1 	bl	800079c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <SysTick_Config+0x40>)
 8000822:	2207      	movs	r2, #7
 8000824:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	e000e010 	.word	0xe000e010

08000834 <DebounceStartButton>:
//-------------------------------------------------------------
//
//-------------------------------------------------------------

uint8_t DebounceStartButton (uint8_t lastStartState)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	SysTick_Config(SystemCoreClock/1000);
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <DebounceStartButton+0x50>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <DebounceStartButton+0x54>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	099b      	lsrs	r3, r3, #6
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffd0 	bl	80007f0 <SysTick_Config>

	uint8_t currentState = BUTTONREAD();
 8000850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <DebounceStartButton+0x58>)
 8000856:	f7ff fd35 	bl	80002c4 <GPIO_ReadInputDataBit>
 800085a:	4603      	mov	r3, r0
 800085c:	73fb      	strb	r3, [r7, #15]
	if (currentState != lastStartState)
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	429a      	cmp	r2, r3
 8000864:	d009      	beq.n	800087a <DebounceStartButton+0x46>
	{
		delay_ms(5);
 8000866:	2005      	movs	r0, #5
 8000868:	f000 f8ce 	bl	8000a08 <delay_ms>
		currentState = BUTTONREAD();
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <DebounceStartButton+0x58>)
 8000872:	f7ff fd27 	bl	80002c4 <GPIO_ReadInputDataBit>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]
	}
	return currentState;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000004 	.word	0x20000004
 8000888:	10624dd3 	.word	0x10624dd3
 800088c:	40010c00 	.word	0x40010c00

08000890 <DebounceSelectButton>:
//-------------------------------------------------------------
//
//-------------------------------------------------------------

uint8_t DebounceSelectButton (uint8_t lastSelectState)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	SysTick_Config(SystemCoreClock/1000);
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <DebounceSelectButton+0x4c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <DebounceSelectButton+0x50>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	099b      	lsrs	r3, r3, #6
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffa2 	bl	80007f0 <SysTick_Config>

	uint8_t currentState = SELECTBUTTONREAD();
 80008ac:	2101      	movs	r1, #1
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <DebounceSelectButton+0x54>)
 80008b0:	f7ff fd08 	bl	80002c4 <GPIO_ReadInputDataBit>
 80008b4:	4603      	mov	r3, r0
 80008b6:	73fb      	strb	r3, [r7, #15]
	if (currentState != lastSelectState)
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d008      	beq.n	80008d2 <DebounceSelectButton+0x42>
	{
		delay_ms(5);
 80008c0:	2005      	movs	r0, #5
 80008c2:	f000 f8a1 	bl	8000a08 <delay_ms>
		currentState = SELECTBUTTONREAD();
 80008c6:	2101      	movs	r1, #1
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <DebounceSelectButton+0x54>)
 80008ca:	f7ff fcfb 	bl	80002c4 <GPIO_ReadInputDataBit>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]
	}
	return currentState;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000004 	.word	0x20000004
 80008e0:	10624dd3 	.word	0x10624dd3
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <StartButton>:
//-------------------------------------------------------------



uint8_t StartButton (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

	currentButtonState = DebounceStartButton(lastButtonState);
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <StartButton+0x6c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff9f 	bl	8000834 <DebounceStartButton>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <StartButton+0x70>)
 80008fc:	701a      	strb	r2, [r3, #0]

	if (currentButtonState == 1 && lastButtonState == 0)
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <StartButton+0x70>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d115      	bne.n	8000932 <StartButton+0x4a>
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <StartButton+0x6c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d111      	bne.n	8000932 <StartButton+0x4a>
	{
		buttonState_count++;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <StartButton+0x74>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <StartButton+0x74>)
 8000918:	701a      	strb	r2, [r3, #0]
		lastButtonState = currentButtonState;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <StartButton+0x70>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <StartButton+0x6c>)
 8000920:	701a      	strb	r2, [r3, #0]

		if (buttonState_count > 1)
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <StartButton+0x74>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d90f      	bls.n	800094a <StartButton+0x62>
		{
			buttonState_count = 0;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <StartButton+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
		if (buttonState_count > 1)
 8000930:	e00b      	b.n	800094a <StartButton+0x62>
		}

	}
	else if (currentButtonState == 0 && lastButtonState == 1)
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <StartButton+0x70>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d107      	bne.n	800094a <StartButton+0x62>
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <StartButton+0x6c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d103      	bne.n	800094a <StartButton+0x62>
	{
		lastButtonState = currentButtonState;
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <StartButton+0x70>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <StartButton+0x6c>)
 8000948:	701a      	strb	r2, [r3, #0]
	else
	{
		OFF();
	}
*/
	return buttonState_count;
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <StartButton+0x74>)
 800094c:	781b      	ldrb	r3, [r3, #0]
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000024 	.word	0x20000024
 8000958:	20000025 	.word	0x20000025
 800095c:	20000026 	.word	0x20000026

08000960 <SelectButton>:
//-------------------------------------------------------------
//
//-------------------------------------------------------------

uint8_t SelectButton (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

	uint8_t countNumber = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	71fb      	strb	r3, [r7, #7]

	currentSelectButtonState = DebounceSelectButton(lastSelectButtonState);
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <SelectButton+0x78>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff8e 	bl	8000890 <DebounceSelectButton>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <SelectButton+0x7c>)
 800097a:	701a      	strb	r2, [r3, #0]

	if (currentSelectButtonState == 1 && lastSelectButtonState == 0)
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <SelectButton+0x7c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d116      	bne.n	80009b2 <SelectButton+0x52>
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <SelectButton+0x78>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d112      	bne.n	80009b2 <SelectButton+0x52>
	{
		selectButtonState_count++;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <SelectButton+0x80>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <SelectButton+0x80>)
 8000996:	701a      	strb	r2, [r3, #0]
		lastSelectButtonState = currentSelectButtonState;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <SelectButton+0x7c>)
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <SelectButton+0x78>)
 800099e:	701a      	strb	r2, [r3, #0]

		if (selectButtonState_count > countNumber)
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <SelectButton+0x80>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d20f      	bcs.n	80009ca <SelectButton+0x6a>
		{
			selectButtonState_count = 1;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <SelectButton+0x80>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
		if (selectButtonState_count > countNumber)
 80009b0:	e00b      	b.n	80009ca <SelectButton+0x6a>
		}

	}
	else if (currentSelectButtonState == 0 && lastSelectButtonState == 1)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <SelectButton+0x7c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d107      	bne.n	80009ca <SelectButton+0x6a>
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <SelectButton+0x78>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d103      	bne.n	80009ca <SelectButton+0x6a>
	{
		lastSelectButtonState = currentSelectButtonState;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SelectButton+0x7c>)
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SelectButton+0x78>)
 80009c8:	701a      	strb	r2, [r3, #0]
	}

	return selectButtonState_count ;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SelectButton+0x80>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000027 	.word	0x20000027
 80009dc:	20000028 	.word	0x20000028
 80009e0:	20000000 	.word	0x20000000

080009e4 <SysTick_Handler>:
//-------------------------------------------------------------
//Задержка
//-------------------------------------------------------------

void SysTick_Handler (void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	if (delay_count > 0)
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SysTick_Handler+0x20>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <SysTick_Handler+0x18>
	{
		delay_count--;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Handler+0x20>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <SysTick_Handler+0x20>)
 80009fa:	801a      	strh	r2, [r3, #0]
	}
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	2000002a 	.word	0x2000002a

08000a08 <delay_ms>:

void delay_ms (uint16_t delay_par)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	delay_count = delay_par;
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <delay_ms+0x24>)
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	8013      	strh	r3, [r2, #0]
	while(delay_count) {}
 8000a18:	bf00      	nop
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <delay_ms+0x24>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1fb      	bne.n	8000a1a <delay_ms+0x12>
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	2000002a 	.word	0x2000002a

08000a30 <LCD_delay_ms>:

void LCD_delay_ms (void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 1000; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	e002      	b.n	8000a42 <LCD_delay_ms+0x12>
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	80fb      	strh	r3, [r7, #6]
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a48:	d3f8      	bcc.n	8000a3c <LCD_delay_ms+0xc>
	{

	}
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <LCD_GPIO_ini>:
//-------------------------------------------------------------
//Инициализация дисплея
//-------------------------------------------------------------

void LCD_GPIO_ini (void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init_Pin;

	RS_RCC_FUNC(RS_RCC, ENABLE);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f7ff fc61 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = RS_PIN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a66:	2310      	movs	r3, #16
 8000a68:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(RS_PORT, &GPIO_Init_Pin);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4853      	ldr	r0, [pc, #332]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000a74:	f7ff fb6a 	bl	800014c <GPIO_Init>


	RW_RCC_FUNC(RW_RCC, ENABLE);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f7ff fc52 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = RW_PIN;
 8000a80:	2304      	movs	r3, #4
 8000a82:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a84:	2310      	movs	r3, #16
 8000a86:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(RW_PORT, &GPIO_Init_Pin);
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	484b      	ldr	r0, [pc, #300]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000a92:	f7ff fb5b 	bl	800014c <GPIO_Init>


	EN_RCC_FUNC(EN_RCC, ENABLE);
 8000a96:	2101      	movs	r1, #1
 8000a98:	2004      	movs	r0, #4
 8000a9a:	f7ff fc43 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = EN_PIN;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(EN_PORT, &GPIO_Init_Pin);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4844      	ldr	r0, [pc, #272]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000ab0:	f7ff fb4c 	bl	800014c <GPIO_Init>


	DB0_RCC_FUNC(DB0_RCC, ENABLE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2004      	movs	r0, #4
 8000ab8:	f7ff fc34 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB0_PIN;
 8000abc:	2310      	movs	r3, #16
 8000abe:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB0_PORT, &GPIO_Init_Pin);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000ace:	f7ff fb3d 	bl	800014c <GPIO_Init>


	DB1_RCC_FUNC(DB1_RCC, ENABLE);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2004      	movs	r0, #4
 8000ad6:	f7ff fc25 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB1_PIN;
 8000ada:	2320      	movs	r3, #32
 8000adc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB1_PORT, &GPIO_Init_Pin);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000aec:	f7ff fb2e 	bl	800014c <GPIO_Init>


	DB2_RCC_FUNC(DB2_RCC, ENABLE);
 8000af0:	2101      	movs	r1, #1
 8000af2:	2004      	movs	r0, #4
 8000af4:	f7ff fc16 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB2_PIN;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000afc:	2310      	movs	r3, #16
 8000afe:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000b00:	2303      	movs	r3, #3
 8000b02:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB2_PORT, &GPIO_Init_Pin);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	482d      	ldr	r0, [pc, #180]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000b0a:	f7ff fb1f 	bl	800014c <GPIO_Init>


	DB3_RCC_FUNC(DB3_RCC, ENABLE);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2004      	movs	r0, #4
 8000b12:	f7ff fc07 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB3_PIN;
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB3_PORT, &GPIO_Init_Pin);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4826      	ldr	r0, [pc, #152]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000b28:	f7ff fb10 	bl	800014c <GPIO_Init>


	DB4_RCC_FUNC(DB4_RCC, ENABLE);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2004      	movs	r0, #4
 8000b30:	f7ff fbf8 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB4_PIN;
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB4_PORT, &GPIO_Init_Pin);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000b48:	f7ff fb00 	bl	800014c <GPIO_Init>


	DB5_RCC_FUNC(DB5_RCC, ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f7ff fbe8 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB5_PIN;
 8000b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b58:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB5_PORT, &GPIO_Init_Pin);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000b68:	f7ff faf0 	bl	800014c <GPIO_Init>


	DB6_RCC_FUNC(DB6_RCC, ENABLE);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	2004      	movs	r0, #4
 8000b70:	f7ff fbd8 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB6_PIN;
 8000b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b78:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB6_PORT, &GPIO_Init_Pin);
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000b88:	f7ff fae0 	bl	800014c <GPIO_Init>


	DB7_RCC_FUNC(DB7_RCC, ENABLE);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f7ff fbc8 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = DB7_PIN;
 8000b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b98:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(DB7_PORT, &GPIO_Init_Pin);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000ba8:	f7ff fad0 	bl	800014c <GPIO_Init>

	RW(0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <LCD_GPIO_ini+0x16c>)
 8000bb2:	f7ff fba0 	bl	80002f6 <GPIO_WriteBit>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <PinInit>:

void PinInit (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init_Pin;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2008      	movs	r0, #8
 8000bce:	f7ff fba9 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Pin.GPIO_Pin = GPIO_Pin_10;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Pin.GPIO_Mode = GPIO_Mode_Out_PP;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(GPIOB, &GPIO_Init_Pin);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <PinInit+0x30>)
 8000be6:	f7ff fab1 	bl	800014c <GPIO_Init>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010c00 	.word	0x40010c00

08000bf8 <ButtonPinInit>:
//-------------------------------------------------------------
//Инициализация кнопок
//-------------------------------------------------------------

void ButtonPinInit (void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init_Button_Pin;

	BUTTON_RCC_FUNC(BUTTON_RCC, ENABLE);
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2008      	movs	r0, #8
 8000c02:	f7ff fb8f 	bl	8000324 <RCC_APB2PeriphClockCmd>

	GPIO_Init_Button_Pin.GPIO_Pin = BUTTON_PIN_1 | BUTTON_PIN_2;
 8000c06:	f640 0301 	movw	r3, #2049	; 0x801
 8000c0a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init_Button_Pin.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init_Button_Pin.GPIO_Speed = GPIO_Speed_50MHz;
 8000c10:	2303      	movs	r3, #3
 8000c12:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(BUTTON_PORT, &GPIO_Init_Button_Pin);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <ButtonPinInit+0x30>)
 8000c1a:	f7ff fa97 	bl	800014c <GPIO_Init>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010c00 	.word	0x40010c00

08000c2c <NVIC_SetPriority>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	da0b      	bge.n	8000c58 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c40:	490d      	ldr	r1, [pc, #52]	; (8000c78 <NVIC_SetPriority+0x4c>)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	3b04      	subs	r3, #4
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	761a      	strb	r2, [r3, #24]
}
 8000c56:	e009      	b.n	8000c6c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <NVIC_SetPriority+0x50>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <SysTick_Config>:
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8e:	d301      	bcc.n	8000c94 <SysTick_Config+0x14>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e011      	b.n	8000cb8 <SysTick_Config+0x38>
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f7ff ffc1 	bl	8000c2c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <main>:
#include "main.h"

int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

	uint8_t pntr = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t scr_c = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71bb      	strb	r3, [r7, #6]
	uint8_t scr_l = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	717b      	strb	r3, [r7, #5]
	uint8_t ScreenCount = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	713b      	strb	r3, [r7, #4]
	uint8_t buttonState = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	70fb      	strb	r3, [r7, #3]
	uint8_t startButtonState = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	70bb      	strb	r3, [r7, #2]

	SysTick_Config(SystemCoreClock/1000);
 8000ce2:	4b5a      	ldr	r3, [pc, #360]	; (8000e4c <main+0x188>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a5a      	ldr	r2, [pc, #360]	; (8000e50 <main+0x18c>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffc6 	bl	8000c80 <SysTick_Config>
	delay_ms(20);
 8000cf4:	2014      	movs	r0, #20
 8000cf6:	f7ff fe87 	bl	8000a08 <delay_ms>
	LCD_ini();
 8000cfa:	f7ff fc13 	bl	8000524 <LCD_ini>
	ButtonPinInit();
 8000cfe:	f7ff ff7b 	bl	8000bf8 <ButtonPinInit>
	PinInit ();
 8000d02:	f7ff ff5f 	bl	8000bc4 <PinInit>
	while(1)
	{

//-------------------------------------------------------------

		if (SelectButton() == 1)
 8000d06:	f7ff fe2b 	bl	8000960 <SelectButton>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d102      	bne.n	8000d16 <main+0x52>
		{
			buttonState = 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	70fb      	strb	r3, [r7, #3]
 8000d14:	e001      	b.n	8000d1a <main+0x56>
		}
		else
		{
			buttonState = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	70fb      	strb	r3, [r7, #3]
		}


		if (StartButton() == 0)
 8000d1a:	f7ff fde5 	bl	80008e8 <StartButton>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <main+0x66>
		{
			startButtonState = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70bb      	strb	r3, [r7, #2]
 8000d28:	e001      	b.n	8000d2e <main+0x6a>
		}
		else
		{
			startButtonState = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	70bb      	strb	r3, [r7, #2]
		}

//-------------------------------------------------------------

		if ((buttonState == 1) && (ScreenCount == 0))
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d109      	bne.n	8000d48 <main+0x84>
 8000d34:	793b      	ldrb	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d106      	bne.n	8000d48 <main+0x84>
		{
			pntr = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
			scr_c = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71bb      	strb	r3, [r7, #6]
			ScreenCount = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	713b      	strb	r3, [r7, #4]
 8000d46:	e025      	b.n	8000d94 <main+0xd0>
		}
		else if ((buttonState == 2) && (ScreenCount == 1))
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d109      	bne.n	8000d62 <main+0x9e>
 8000d4e:	793b      	ldrb	r3, [r7, #4]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d106      	bne.n	8000d62 <main+0x9e>
		{
			pntr = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
			scr_c = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	71bb      	strb	r3, [r7, #6]
			ScreenCount = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	713b      	strb	r3, [r7, #4]
 8000d60:	e018      	b.n	8000d94 <main+0xd0>
		}
		else if ((buttonState == 1) && (ScreenCount == 2))
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d109      	bne.n	8000d7c <main+0xb8>
 8000d68:	793b      	ldrb	r3, [r7, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d106      	bne.n	8000d7c <main+0xb8>
		{
			pntr = 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
			scr_c = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	71bb      	strb	r3, [r7, #6]
			ScreenCount = 3;
 8000d76:	2303      	movs	r3, #3
 8000d78:	713b      	strb	r3, [r7, #4]
 8000d7a:	e00b      	b.n	8000d94 <main+0xd0>
		}
		else if ((buttonState == 2) && (ScreenCount == 3))
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d108      	bne.n	8000d94 <main+0xd0>
 8000d82:	793b      	ldrb	r3, [r7, #4]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d105      	bne.n	8000d94 <main+0xd0>
		{
			pntr = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
			scr_c = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	71bb      	strb	r3, [r7, #6]
			ScreenCount = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	713b      	strb	r3, [r7, #4]
		}

//-------------------------------------------------------------

		if ((startButtonState == 1) && (buttonState == 1) && (ScreenCount == 1))
 8000d94:	78bb      	ldrb	r3, [r7, #2]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d132      	bne.n	8000e00 <main+0x13c>
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d12f      	bne.n	8000e00 <main+0x13c>
 8000da0:	793b      	ldrb	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d12c      	bne.n	8000e00 <main+0x13c>
		{
			uint8_t x = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	707b      	strb	r3, [r7, #1]
			uint8_t SecondScreenCount = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	703b      	strb	r3, [r7, #0]

			if (x == 1)
 8000dae:	787b      	ldrb	r3, [r7, #1]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d125      	bne.n	8000e00 <main+0x13c>
			{
				if ((buttonState == 1) && (SecondScreenCount == 0))
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d109      	bne.n	8000dce <main+0x10a>
 8000dba:	783b      	ldrb	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d106      	bne.n	8000dce <main+0x10a>
				{
					pntr = 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	71fb      	strb	r3, [r7, #7]
					scr_c = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	71bb      	strb	r3, [r7, #6]
					SecondScreenCount = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	703b      	strb	r3, [r7, #0]
 8000dcc:	e018      	b.n	8000e00 <main+0x13c>
				}
				else if ((buttonState == 2) && (SecondScreenCount == 1))
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d109      	bne.n	8000de8 <main+0x124>
 8000dd4:	783b      	ldrb	r3, [r7, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d106      	bne.n	8000de8 <main+0x124>
				{
					pntr = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
					scr_c = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	71bb      	strb	r3, [r7, #6]
					SecondScreenCount = 2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	703b      	strb	r3, [r7, #0]
 8000de6:	e00b      	b.n	8000e00 <main+0x13c>
				}
				else if ((buttonState == 1) && (SecondScreenCount == 2))
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <main+0x13c>
 8000dee:	783b      	ldrb	r3, [r7, #0]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d105      	bne.n	8000e00 <main+0x13c>
				{
					pntr = 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
					scr_c = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	71bb      	strb	r3, [r7, #6]
					SecondScreenCount = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	703b      	strb	r3, [r7, #0]
		}


//-------------------------------------------------------------

		if ((scr_c == 1) && (scr_l == 0)) 		// Очистка дисплея при
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10b      	bne.n	8000e1e <main+0x15a>
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d108      	bne.n	8000e1e <main+0x15a>
		{								  		// перехде на новый экран
			LCD_Send_Command(0x01);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fb49 	bl	80004a4 <LCD_Send_Command>
			delay_ms(2);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fdf8 	bl	8000a08 <delay_ms>
			scr_l = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	717b      	strb	r3, [r7, #5]
 8000e1c:	e00d      	b.n	8000e3a <main+0x176>
		}
		else if ((scr_c == 0) && (scr_l == 1))
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10a      	bne.n	8000e3a <main+0x176>
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d107      	bne.n	8000e3a <main+0x176>
		{
			LCD_Send_Command(0x01);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff fb3a 	bl	80004a4 <LCD_Send_Command>
			delay_ms(2);
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fde9 	bl	8000a08 <delay_ms>
			scr_l = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	717b      	strb	r3, [r7, #5]
		}

//-------------------------------------------------------------

		LCD_Screen(scr_c);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fbf7 	bl	8000630 <LCD_Screen>

		LCD_Pointer(pntr);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fc7f 	bl	8000748 <LCD_Pointer>
		if (SelectButton() == 1)
 8000e4a:	e75c      	b.n	8000d06 <main+0x42>
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	10624dd3 	.word	0x10624dd3

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e5a:	e003      	b.n	8000e64 <LoopCopyDataInit>

08000e5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000e5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e62:	3104      	adds	r1, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000e68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e6c:	d3f6      	bcc.n	8000e5c <CopyDataInit>
	ldr	r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000e70:	e002      	b.n	8000e78 <LoopFillZerobss>

08000e72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e74:	f842 3b04 	str.w	r3, [r2], #4

08000e78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000e7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e7c:	d3f9      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7e:	f000 f813 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f000 f8cb 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff ff1d 	bl	8000cc4 <main>
	bx	lr
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e8c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000e90:	080010bc 	.word	0x080010bc
	ldr	r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e98:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000e9c:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8000ea0:	2000002c 	.word	0x2000002c

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>
	...

08000ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000eac:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <SystemInit+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <SystemInit+0x5c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000eb8:	4912      	ldr	r1, [pc, #72]	; (8000f04 <SystemInit+0x5c>)
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SystemInit+0x5c>)
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <SystemInit+0x60>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SystemInit+0x5c>)
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0x5c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <SystemInit+0x5c>)
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <SystemInit+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <SystemInit+0x5c>)
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <SystemInit+0x5c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000eea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SystemInit+0x5c>)
 8000eee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ef2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000ef4:	f000 f80c 	bl	8000f10 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SystemInit+0x64>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efe:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	f8ff0000 	.word	0xf8ff0000
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000f14:	f000 f802 	bl	8000f1c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f2a:	4a3a      	ldr	r2, [pc, #232]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d103      	bne.n	8000f54 <SetSysClockTo72+0x38>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f52:	d1f0      	bne.n	8000f36 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f60:	2301      	movs	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	e001      	b.n	8000f6a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d14b      	bne.n	8001008 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000f70:	4a29      	ldr	r2, [pc, #164]	; (8001018 <SetSysClockTo72+0xfc>)
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <SetSysClockTo72+0xfc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f043 0310 	orr.w	r3, r3, #16
 8000f7a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <SetSysClockTo72+0xfc>)
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <SetSysClockTo72+0xfc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000f88:	4a23      	ldr	r2, [pc, #140]	; (8001018 <SetSysClockTo72+0xfc>)
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <SetSysClockTo72+0xfc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000f94:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <SetSysClockTo72+0xf8>)
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000fba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000fbc:	4a15      	ldr	r2, [pc, #84]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000fc6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000fd4:	bf00      	nop
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f9      	beq.n	8000fd6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <SetSysClockTo72+0xf8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 0303 	bic.w	r3, r3, #3
 8000fec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <SetSysClockTo72+0xf8>)
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <SetSysClockTo72+0xf8>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000ffa:	bf00      	nop
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SetSysClockTo72+0xf8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b08      	cmp	r3, #8
 8001006:	d1f9      	bne.n	8000ffc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40022000 	.word	0x40022000

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	2500      	movs	r5, #0
 8001020:	4e0c      	ldr	r6, [pc, #48]	; (8001054 <__libc_init_array+0x38>)
 8001022:	4c0d      	ldr	r4, [pc, #52]	; (8001058 <__libc_init_array+0x3c>)
 8001024:	1ba4      	subs	r4, r4, r6
 8001026:	10a4      	asrs	r4, r4, #2
 8001028:	42a5      	cmp	r5, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	f000 f81a 	bl	8001064 <_init>
 8001030:	2500      	movs	r5, #0
 8001032:	4e0a      	ldr	r6, [pc, #40]	; (800105c <__libc_init_array+0x40>)
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <__libc_init_array+0x44>)
 8001036:	1ba4      	subs	r4, r4, r6
 8001038:	10a4      	asrs	r4, r4, #2
 800103a:	42a5      	cmp	r5, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001044:	4798      	blx	r3
 8001046:	3501      	adds	r5, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800104e:	4798      	blx	r3
 8001050:	3501      	adds	r5, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	080010b4 	.word	0x080010b4
 8001058:	080010b4 	.word	0x080010b4
 800105c:	080010b4 	.word	0x080010b4
 8001060:	080010b8 	.word	0x080010b8

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
